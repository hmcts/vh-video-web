/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.4.0 (NJsonSchema v10.0.21.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class ApiClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5800";
    }

    /**
     * Get conferences today for a judge or a clerk
     * @return Success
     */
    getConferencesForJudge(): Observable<ConferenceForUserResponse[]> {
        let url_ = this.baseUrl + "/conferences/judges";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetConferencesForJudge(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetConferencesForJudge(<any>response_);
                } catch (e) {
                    return <Observable<ConferenceForUserResponse[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ConferenceForUserResponse[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetConferencesForJudge(response: HttpResponseBase): Observable<ConferenceForUserResponse[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ConferenceForUserResponse.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ConferenceForUserResponse[]>(<any>null);
    }

    /**
     * Get conferences today for individual or representative excluding those that have been closed for over 30 minutes
     * @return Success
     */
    getConferencesForIndividual(): Observable<ConferenceForUserResponse[]> {
        let url_ = this.baseUrl + "/conferences/individuals";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetConferencesForIndividual(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetConferencesForIndividual(<any>response_);
                } catch (e) {
                    return <Observable<ConferenceForUserResponse[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ConferenceForUserResponse[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetConferencesForIndividual(response: HttpResponseBase): Observable<ConferenceForUserResponse[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ConferenceForUserResponse.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ConferenceForUserResponse[]>(<any>null);
    }

    /**
     * Get conferences for user
     * @return Success
     */
    getConferencesForVHOfficer(): Observable<ConferenceForUserResponse[]> {
        let url_ = this.baseUrl + "/conferences/vhofficer";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetConferencesForVHOfficer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetConferencesForVHOfficer(<any>response_);
                } catch (e) {
                    return <Observable<ConferenceForUserResponse[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ConferenceForUserResponse[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetConferencesForVHOfficer(response: HttpResponseBase): Observable<ConferenceForUserResponse[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ConferenceForUserResponse.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ConferenceForUserResponse[]>(<any>null);
    }

    /**
     * Get the details of a conference by id
     * @param conferenceId The unique id of the conference
     * @return Success
     */
    getConferenceById(conferenceId: string): Observable<ConferenceResponse> {
        let url_ = this.baseUrl + "/conferences/{conferenceId}";
        if (conferenceId === undefined || conferenceId === null)
            throw new Error("The parameter 'conferenceId' must be defined.");
        url_ = url_.replace("{conferenceId}", encodeURIComponent("" + conferenceId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetConferenceById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetConferenceById(<any>response_);
                } catch (e) {
                    return <Observable<ConferenceResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ConferenceResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetConferenceById(response: HttpResponseBase): Observable<ConferenceResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ConferenceResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ConferenceResponse>(<any>null);
    }

    /**
     * GetClientConfigurationSettings the configuration settings for client
     * @return Success
     */
    getClientConfigurationSettings(): Observable<ClientSettingsResponse> {
        let url_ = this.baseUrl + "/config";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetClientConfigurationSettings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClientConfigurationSettings(<any>response_);
                } catch (e) {
                    return <Observable<ClientSettingsResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ClientSettingsResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetClientConfigurationSettings(response: HttpResponseBase): Observable<ClientSettingsResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClientSettingsResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ClientSettingsResponse>(<any>null);
    }

    /**
     * Raise or answer to a private consultation request with another participant
     * @param request (optional) Private consultation request with or without an answer
     * @return Success
     */
    handleConsultationRequest(request: ConsultationRequest | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/consultations";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandleConsultationRequest(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandleConsultationRequest(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processHandleConsultationRequest(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 !== undefined ? resultData400 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param request (optional) 
     * @return Success
     */
    leavePrivateConsultation(request: LeaveConsultationRequest | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/consultations/leave";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLeavePrivateConsultation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLeavePrivateConsultation(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processLeavePrivateConsultation(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param request (optional) 
     * @return Success
     */
    respondToAdminConsultationRequest(request: AdminConsultationRequest | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/consultations/vhofficer/respond";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRespondToAdminConsultationRequest(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRespondToAdminConsultationRequest(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processRespondToAdminConsultationRequest(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Check Service Health
     * @return Success
     */
    checkServiceHealth(): Observable<HealthCheckResponse> {
        let url_ = this.baseUrl + "/HealthCheck/health";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCheckServiceHealth(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCheckServiceHealth(<any>response_);
                } catch (e) {
                    return <Observable<HealthCheckResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<HealthCheckResponse>><any>_observableThrow(response_);
        }));
    }

    protected processCheckServiceHealth(response: HttpResponseBase): Observable<HealthCheckResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HealthCheckResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = HealthCheckResponse.fromJS(resultData500);
            return throwException("A server error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HealthCheckResponse>(<any>null);
    }

    /**
     * @param addMediaEventRequest (optional) 
     * @return Success
     */
    addMediaEventToConference(conferenceId: string, addMediaEventRequest: AddMediaEventRequest | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/conferences/{conferenceId}/mediaevents";
        if (conferenceId === undefined || conferenceId === null)
            throw new Error("The parameter 'conferenceId' must be defined.");
        url_ = url_.replace("{conferenceId}", encodeURIComponent("" + conferenceId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(addMediaEventRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddMediaEventToConference(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddMediaEventToConference(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAddMediaEventToConference(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param addSelfTestFailureEventRequest (optional) 
     * @return Success
     */
    addSelfTestFailureEventToConference(conferenceId: string, addSelfTestFailureEventRequest: AddSelfTestFailureEventRequest | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/conferences/{conferenceId}/selftestfailureevents";
        if (conferenceId === undefined || conferenceId === null)
            throw new Error("The parameter 'conferenceId' must be defined.");
        url_ = url_.replace("{conferenceId}", encodeURIComponent("" + conferenceId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(addSelfTestFailureEventRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddSelfTestFailureEventToConference(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddSelfTestFailureEventToConference(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAddSelfTestFailureEventToConference(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @return Success
     */
    getTestCallResult(conferenceId: string, participantId: string): Observable<TestCallScoreResponse> {
        let url_ = this.baseUrl + "/conferences/{conferenceId}/participants/{participantId}/selftestresult";
        if (conferenceId === undefined || conferenceId === null)
            throw new Error("The parameter 'conferenceId' must be defined.");
        url_ = url_.replace("{conferenceId}", encodeURIComponent("" + conferenceId)); 
        if (participantId === undefined || participantId === null)
            throw new Error("The parameter 'participantId' must be defined.");
        url_ = url_.replace("{participantId}", encodeURIComponent("" + participantId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTestCallResult(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTestCallResult(<any>response_);
                } catch (e) {
                    return <Observable<TestCallScoreResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<TestCallScoreResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetTestCallResult(response: HttpResponseBase): Observable<TestCallScoreResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TestCallScoreResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TestCallScoreResponse>(<any>null);
    }

    /**
     * @param updateParticipantStatusEventRequest (optional) 
     * @return Success
     */
    updateParticipantStatus(conferenceId: string, updateParticipantStatusEventRequest: UpdateParticipantStatusEventRequest | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/conferences/{conferenceId}/participantstatus";
        if (conferenceId === undefined || conferenceId === null)
            throw new Error("The parameter 'conferenceId' must be defined.");
        url_ = url_.replace("{conferenceId}", encodeURIComponent("" + conferenceId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateParticipantStatusEventRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateParticipantStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateParticipantStatus(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateParticipantStatus(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @return Success
     */
    getUserProfile(): Observable<UserProfileResponse> {
        let url_ = this.baseUrl + "/profile";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserProfile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserProfile(<any>response_);
                } catch (e) {
                    return <Observable<UserProfileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserProfileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserProfile(response: HttpResponseBase): Observable<UserProfileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserProfileResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserProfileResponse>(<any>null);
    }

    /**
     * @return Success
     */
    getTasks(conferenceId: string): Observable<TaskResponse[]> {
        let url_ = this.baseUrl + "/conferences/{conferenceId}/tasks";
        if (conferenceId === undefined || conferenceId === null)
            throw new Error("The parameter 'conferenceId' must be defined.");
        url_ = url_.replace("{conferenceId}", encodeURIComponent("" + conferenceId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTasks(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTasks(<any>response_);
                } catch (e) {
                    return <Observable<TaskResponse[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<TaskResponse[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetTasks(response: HttpResponseBase): Observable<TaskResponse[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TaskResponse.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TaskResponse[]>(<any>null);
    }

    /**
     * Update existing tasks
     * @param conferenceId The id of the conference to update
     * @param taskId The id of the task to update
     * @return Success
     */
    completeTask(conferenceId: string, taskId: number): Observable<TaskResponse> {
        let url_ = this.baseUrl + "/conferences/{conferenceId}/tasks/{taskId}";
        if (conferenceId === undefined || conferenceId === null)
            throw new Error("The parameter 'conferenceId' must be defined.");
        url_ = url_.replace("{conferenceId}", encodeURIComponent("" + conferenceId)); 
        if (taskId === undefined || taskId === null)
            throw new Error("The parameter 'taskId' must be defined.");
        url_ = url_.replace("{taskId}", encodeURIComponent("" + taskId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCompleteTask(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCompleteTask(<any>response_);
                } catch (e) {
                    return <Observable<TaskResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<TaskResponse>><any>_observableThrow(response_);
        }));
    }

    protected processCompleteTask(response: HttpResponseBase): Observable<TaskResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TaskResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TaskResponse>(<any>null);
    }

    /**
     * @return Success
     */
    getToken(participantId: string): Observable<TokenResponse> {
        let url_ = this.baseUrl + "/participants/{participantId}/token";
        if (participantId === undefined || participantId === null)
            throw new Error("The parameter 'participantId' must be defined.");
        url_ = url_.replace("{participantId}", encodeURIComponent("" + participantId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetToken(<any>response_);
                } catch (e) {
                    return <Observable<TokenResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<TokenResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetToken(response: HttpResponseBase): Observable<TokenResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TokenResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TokenResponse>(<any>null);
    }

    /**
     * @return Success
     */
    getJwtoken(participantId: string): Observable<TokenResponse> {
        let url_ = this.baseUrl + "/participants/{participantId}/jwtoken";
        if (participantId === undefined || participantId === null)
            throw new Error("The parameter 'participantId' must be defined.");
        url_ = url_.replace("{participantId}", encodeURIComponent("" + participantId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetJwtoken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetJwtoken(<any>response_);
                } catch (e) {
                    return <Observable<TokenResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<TokenResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetJwtoken(response: HttpResponseBase): Observable<TokenResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TokenResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TokenResponse>(<any>null);
    }

    /**
     * @param request (optional) 
     * @return Success
     */
    sendEvent(request: ConferenceEventRequest | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/callback";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendEvent(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendEvent(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processSendEvent(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 !== undefined ? resultData400 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export class ConferenceForUserResponse implements IConferenceForUserResponse {
    id?: string | undefined;
    hearing_id?: string | undefined;
    scheduled_date_time?: Date | undefined;
    case_type?: string | undefined;
    case_number?: string | undefined;
    case_name?: string | undefined;
    scheduled_duration?: number | undefined;
    status?: ConferenceStatus | undefined;
    participants?: ParticipantForUserResponse[] | undefined;
    no_of_participants_available?: number | undefined;
    no_of_participants_unavailable?: number | undefined;
    no_of_participants_in_consultation?: number | undefined;
    no_of_pending_tasks?: number | undefined;

    constructor(data?: IConferenceForUserResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.hearing_id = data["hearing_id"];
            this.scheduled_date_time = data["scheduled_date_time"] ? new Date(data["scheduled_date_time"].toString()) : <any>undefined;
            this.case_type = data["case_type"];
            this.case_number = data["case_number"];
            this.case_name = data["case_name"];
            this.scheduled_duration = data["scheduled_duration"];
            this.status = data["status"];
            if (Array.isArray(data["participants"])) {
                this.participants = [] as any;
                for (let item of data["participants"])
                    this.participants!.push(ParticipantForUserResponse.fromJS(item));
            }
            this.no_of_participants_available = data["no_of_participants_available"];
            this.no_of_participants_unavailable = data["no_of_participants_unavailable"];
            this.no_of_participants_in_consultation = data["no_of_participants_in_consultation"];
            this.no_of_pending_tasks = data["no_of_pending_tasks"];
        }
    }

    static fromJS(data: any): ConferenceForUserResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ConferenceForUserResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["hearing_id"] = this.hearing_id;
        data["scheduled_date_time"] = this.scheduled_date_time ? this.scheduled_date_time.toISOString() : <any>undefined;
        data["case_type"] = this.case_type;
        data["case_number"] = this.case_number;
        data["case_name"] = this.case_name;
        data["scheduled_duration"] = this.scheduled_duration;
        data["status"] = this.status;
        if (Array.isArray(this.participants)) {
            data["participants"] = [];
            for (let item of this.participants)
                data["participants"].push(item.toJSON());
        }
        data["no_of_participants_available"] = this.no_of_participants_available;
        data["no_of_participants_unavailable"] = this.no_of_participants_unavailable;
        data["no_of_participants_in_consultation"] = this.no_of_participants_in_consultation;
        data["no_of_pending_tasks"] = this.no_of_pending_tasks;
        return data; 
    }
}

export interface IConferenceForUserResponse {
    id?: string | undefined;
    hearing_id?: string | undefined;
    scheduled_date_time?: Date | undefined;
    case_type?: string | undefined;
    case_number?: string | undefined;
    case_name?: string | undefined;
    scheduled_duration?: number | undefined;
    status?: ConferenceStatus | undefined;
    participants?: ParticipantForUserResponse[] | undefined;
    no_of_participants_available?: number | undefined;
    no_of_participants_unavailable?: number | undefined;
    no_of_participants_in_consultation?: number | undefined;
    no_of_pending_tasks?: number | undefined;
}

export enum ConferenceStatus {
    NotStarted = "NotStarted",
    InSession = "InSession",
    Paused = "Paused",
    Suspended = "Suspended",
    Closed = "Closed",
}

export class ParticipantForUserResponse implements IParticipantForUserResponse {
    username?: string | undefined;
    display_name?: string | undefined;
    role?: UserRole | undefined;
    status?: ParticipantStatus | undefined;
    representee?: string | undefined;
    case_type_group?: string | undefined;

    constructor(data?: IParticipantForUserResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.username = data["username"];
            this.display_name = data["display_name"];
            this.role = data["role"];
            this.status = data["status"];
            this.representee = data["representee"];
            this.case_type_group = data["case_type_group"];
        }
    }

    static fromJS(data: any): ParticipantForUserResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ParticipantForUserResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["display_name"] = this.display_name;
        data["role"] = this.role;
        data["status"] = this.status;
        data["representee"] = this.representee;
        data["case_type_group"] = this.case_type_group;
        return data; 
    }
}

export interface IParticipantForUserResponse {
    username?: string | undefined;
    display_name?: string | undefined;
    role?: UserRole | undefined;
    status?: ParticipantStatus | undefined;
    representee?: string | undefined;
    case_type_group?: string | undefined;
}

export enum UserRole {
    None = "None",
    CaseAdmin = "CaseAdmin",
    VideoHearingsOfficer = "VideoHearingsOfficer",
    HearingFacilitationSupport = "HearingFacilitationSupport",
    Judge = "Judge",
    Individual = "Individual",
    Representative = "Representative",
}

export enum ParticipantStatus {
    None = "None",
    NotSignedIn = "NotSignedIn",
    UnableToJoin = "UnableToJoin",
    Joining = "Joining",
    Available = "Available",
    InHearing = "InHearing",
    InConsultation = "InConsultation",
    Disconnected = "Disconnected",
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.type = data["type"];
            this.title = data["title"];
            this.status = data["status"];
            this.detail = data["detail"];
            this.instance = data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data; 
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
}

export class ConferenceResponse implements IConferenceResponse {
    id?: string | undefined;
    scheduled_date_time?: Date | undefined;
    scheduled_duration?: number | undefined;
    case_type?: string | undefined;
    case_number?: string | undefined;
    case_name?: string | undefined;
    status?: ConferenceStatus | undefined;
    judge_i_frame_uri?: string | undefined;
    admin_i_frame_uri?: string | undefined;
    participant_uri?: string | undefined;
    pexip_node_uri?: string | undefined;
    pexip_self_test_node_uri?: string | undefined;
    participants?: ParticipantResponse[] | undefined;
    closed_date_time?: Date | undefined;

    constructor(data?: IConferenceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.scheduled_date_time = data["scheduled_date_time"] ? new Date(data["scheduled_date_time"].toString()) : <any>undefined;
            this.scheduled_duration = data["scheduled_duration"];
            this.case_type = data["case_type"];
            this.case_number = data["case_number"];
            this.case_name = data["case_name"];
            this.status = data["status"];
            this.judge_i_frame_uri = data["judge_i_frame_uri"];
            this.admin_i_frame_uri = data["admin_i_frame_uri"];
            this.participant_uri = data["participant_uri"];
            this.pexip_node_uri = data["pexip_node_uri"];
            this.pexip_self_test_node_uri = data["pexip_self_test_node_uri"];
            if (Array.isArray(data["participants"])) {
                this.participants = [] as any;
                for (let item of data["participants"])
                    this.participants!.push(ParticipantResponse.fromJS(item));
            }
            this.closed_date_time = data["closed_date_time"] ? new Date(data["closed_date_time"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ConferenceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ConferenceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["scheduled_date_time"] = this.scheduled_date_time ? this.scheduled_date_time.toISOString() : <any>undefined;
        data["scheduled_duration"] = this.scheduled_duration;
        data["case_type"] = this.case_type;
        data["case_number"] = this.case_number;
        data["case_name"] = this.case_name;
        data["status"] = this.status;
        data["judge_i_frame_uri"] = this.judge_i_frame_uri;
        data["admin_i_frame_uri"] = this.admin_i_frame_uri;
        data["participant_uri"] = this.participant_uri;
        data["pexip_node_uri"] = this.pexip_node_uri;
        data["pexip_self_test_node_uri"] = this.pexip_self_test_node_uri;
        if (Array.isArray(this.participants)) {
            data["participants"] = [];
            for (let item of this.participants)
                data["participants"].push(item.toJSON());
        }
        data["closed_date_time"] = this.closed_date_time ? this.closed_date_time.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IConferenceResponse {
    id?: string | undefined;
    scheduled_date_time?: Date | undefined;
    scheduled_duration?: number | undefined;
    case_type?: string | undefined;
    case_number?: string | undefined;
    case_name?: string | undefined;
    status?: ConferenceStatus | undefined;
    judge_i_frame_uri?: string | undefined;
    admin_i_frame_uri?: string | undefined;
    participant_uri?: string | undefined;
    pexip_node_uri?: string | undefined;
    pexip_self_test_node_uri?: string | undefined;
    participants?: ParticipantResponse[] | undefined;
    closed_date_time?: Date | undefined;
}

export class ParticipantResponse implements IParticipantResponse {
    id?: string | undefined;
    first_name?: string | undefined;
    last_name?: string | undefined;
    contact_email?: string | undefined;
    contact_telephone?: string | undefined;
    name?: string | undefined;
    username?: string | undefined;
    role?: UserRole | undefined;
    status?: ParticipantStatus | undefined;
    display_name?: string | undefined;
    tiled_display_name?: string | undefined;
    case_type_group?: string | undefined;
    representee?: string | undefined;

    constructor(data?: IParticipantResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.first_name = data["first_name"];
            this.last_name = data["last_name"];
            this.contact_email = data["contact_email"];
            this.contact_telephone = data["contact_telephone"];
            this.name = data["name"];
            this.username = data["username"];
            this.role = data["role"];
            this.status = data["status"];
            this.display_name = data["display_name"];
            this.tiled_display_name = data["tiled_display_name"];
            this.case_type_group = data["case_type_group"];
            this.representee = data["representee"];
        }
    }

    static fromJS(data: any): ParticipantResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ParticipantResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["first_name"] = this.first_name;
        data["last_name"] = this.last_name;
        data["contact_email"] = this.contact_email;
        data["contact_telephone"] = this.contact_telephone;
        data["name"] = this.name;
        data["username"] = this.username;
        data["role"] = this.role;
        data["status"] = this.status;
        data["display_name"] = this.display_name;
        data["tiled_display_name"] = this.tiled_display_name;
        data["case_type_group"] = this.case_type_group;
        data["representee"] = this.representee;
        return data; 
    }
}

export interface IParticipantResponse {
    id?: string | undefined;
    first_name?: string | undefined;
    last_name?: string | undefined;
    contact_email?: string | undefined;
    contact_telephone?: string | undefined;
    name?: string | undefined;
    username?: string | undefined;
    role?: UserRole | undefined;
    status?: ParticipantStatus | undefined;
    display_name?: string | undefined;
    tiled_display_name?: string | undefined;
    case_type_group?: string | undefined;
    representee?: string | undefined;
}

export class ClientSettingsResponse implements IClientSettingsResponse {
    tenant_id?: string | undefined;
    client_id?: string | undefined;
    redirect_uri?: string | undefined;
    post_logout_redirect_uri?: string | undefined;
    video_api_url?: string | undefined;
    app_insights_instrumentation_key?: string | undefined;

    constructor(data?: IClientSettingsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenant_id = data["tenant_id"];
            this.client_id = data["client_id"];
            this.redirect_uri = data["redirect_uri"];
            this.post_logout_redirect_uri = data["post_logout_redirect_uri"];
            this.video_api_url = data["video_api_url"];
            this.app_insights_instrumentation_key = data["app_insights_instrumentation_key"];
        }
    }

    static fromJS(data: any): ClientSettingsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ClientSettingsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenant_id"] = this.tenant_id;
        data["client_id"] = this.client_id;
        data["redirect_uri"] = this.redirect_uri;
        data["post_logout_redirect_uri"] = this.post_logout_redirect_uri;
        data["video_api_url"] = this.video_api_url;
        data["app_insights_instrumentation_key"] = this.app_insights_instrumentation_key;
        return data; 
    }
}

export interface IClientSettingsResponse {
    tenant_id?: string | undefined;
    client_id?: string | undefined;
    redirect_uri?: string | undefined;
    post_logout_redirect_uri?: string | undefined;
    video_api_url?: string | undefined;
    app_insights_instrumentation_key?: string | undefined;
}

export class ConsultationRequest implements IConsultationRequest {
    conference_id?: string | undefined;
    requested_by?: string | undefined;
    requested_for?: string | undefined;
    answer?: ConsultationAnswer | undefined;

    constructor(data?: IConsultationRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.conference_id = data["conference_id"];
            this.requested_by = data["requested_by"];
            this.requested_for = data["requested_for"];
            this.answer = data["answer"];
        }
    }

    static fromJS(data: any): ConsultationRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ConsultationRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["conference_id"] = this.conference_id;
        data["requested_by"] = this.requested_by;
        data["requested_for"] = this.requested_for;
        data["answer"] = this.answer;
        return data; 
    }
}

export interface IConsultationRequest {
    conference_id?: string | undefined;
    requested_by?: string | undefined;
    requested_for?: string | undefined;
    answer?: ConsultationAnswer | undefined;
}

export enum ConsultationAnswer {
    None = "None",
    Accepted = "Accepted",
    Rejected = "Rejected",
    Cancelled = "Cancelled",
}

export class LeaveConsultationRequest implements ILeaveConsultationRequest {
    conference_id?: string | undefined;
    participant_id?: string | undefined;

    constructor(data?: ILeaveConsultationRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.conference_id = data["conference_id"];
            this.participant_id = data["participant_id"];
        }
    }

    static fromJS(data: any): LeaveConsultationRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LeaveConsultationRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["conference_id"] = this.conference_id;
        data["participant_id"] = this.participant_id;
        return data; 
    }
}

export interface ILeaveConsultationRequest {
    conference_id?: string | undefined;
    participant_id?: string | undefined;
}

export class AdminConsultationRequest implements IAdminConsultationRequest {
    conference_id?: string | undefined;
    participant_id?: string | undefined;
    consultation_room?: RoomType | undefined;
    answer?: ConsultationAnswer | undefined;

    constructor(data?: IAdminConsultationRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.conference_id = data["conference_id"];
            this.participant_id = data["participant_id"];
            this.consultation_room = data["consultation_room"];
            this.answer = data["answer"];
        }
    }

    static fromJS(data: any): AdminConsultationRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AdminConsultationRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["conference_id"] = this.conference_id;
        data["participant_id"] = this.participant_id;
        data["consultation_room"] = this.consultation_room;
        data["answer"] = this.answer;
        return data; 
    }
}

export interface IAdminConsultationRequest {
    conference_id?: string | undefined;
    participant_id?: string | undefined;
    consultation_room?: RoomType | undefined;
    answer?: ConsultationAnswer | undefined;
}

export enum RoomType {
    WaitingRoom = "WaitingRoom",
    HearingRoom = "HearingRoom",
    ConsultationRoom1 = "ConsultationRoom1",
    ConsultationRoom2 = "ConsultationRoom2",
    AdminRoom = "AdminRoom",
}

export class HealthCheckResponse implements IHealthCheckResponse {
    bookings_api_health?: HealthCheck | undefined;
    user_api_health?: HealthCheck | undefined;
    video_api_health?: HealthCheck | undefined;
    events_callback_health?: HealthCheck | undefined;

    constructor(data?: IHealthCheckResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bookings_api_health = data["bookings_api_health"] ? HealthCheck.fromJS(data["bookings_api_health"]) : <any>undefined;
            this.user_api_health = data["user_api_health"] ? HealthCheck.fromJS(data["user_api_health"]) : <any>undefined;
            this.video_api_health = data["video_api_health"] ? HealthCheck.fromJS(data["video_api_health"]) : <any>undefined;
            this.events_callback_health = data["events_callback_health"] ? HealthCheck.fromJS(data["events_callback_health"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HealthCheckResponse {
        data = typeof data === 'object' ? data : {};
        let result = new HealthCheckResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bookings_api_health"] = this.bookings_api_health ? this.bookings_api_health.toJSON() : <any>undefined;
        data["user_api_health"] = this.user_api_health ? this.user_api_health.toJSON() : <any>undefined;
        data["video_api_health"] = this.video_api_health ? this.video_api_health.toJSON() : <any>undefined;
        data["events_callback_health"] = this.events_callback_health ? this.events_callback_health.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IHealthCheckResponse {
    bookings_api_health?: HealthCheck | undefined;
    user_api_health?: HealthCheck | undefined;
    video_api_health?: HealthCheck | undefined;
    events_callback_health?: HealthCheck | undefined;
}

export class HealthCheck implements IHealthCheck {
    successful?: boolean | undefined;
    error_message?: string | undefined;
    data?: { [key: string] : any; } | undefined;

    constructor(data?: IHealthCheck) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.successful = data["successful"];
            this.error_message = data["error_message"];
            if (data["data"]) {
                this.data = {} as any;
                for (let key in data["data"]) {
                    if (data["data"].hasOwnProperty(key))
                        this.data![key] = data["data"][key];
                }
            }
        }
    }

    static fromJS(data: any): HealthCheck {
        data = typeof data === 'object' ? data : {};
        let result = new HealthCheck();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["successful"] = this.successful;
        data["error_message"] = this.error_message;
        if (this.data) {
            data["data"] = {};
            for (let key in this.data) {
                if (this.data.hasOwnProperty(key))
                    data["data"][key] = this.data[key];
            }
        }
        return data; 
    }
}

export interface IHealthCheck {
    successful?: boolean | undefined;
    error_message?: string | undefined;
    data?: { [key: string] : any; } | undefined;
}

export class AddMediaEventRequest implements IAddMediaEventRequest {
    participant_id?: string | undefined;
    event_type?: EventType | undefined;

    constructor(data?: IAddMediaEventRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.participant_id = data["participant_id"];
            this.event_type = data["event_type"];
        }
    }

    static fromJS(data: any): AddMediaEventRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddMediaEventRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["participant_id"] = this.participant_id;
        data["event_type"] = this.event_type;
        return data; 
    }
}

export interface IAddMediaEventRequest {
    participant_id?: string | undefined;
    event_type?: EventType | undefined;
}

export enum EventType {
    None = "None",
    Joined = "Joined",
    Disconnected = "Disconnected",
    Transfer = "Transfer",
    Help = "Help",
    Pause = "Pause",
    Close = "Close",
    Leave = "Leave",
    Consultation = "Consultation",
    JudgeAvailable = "JudgeAvailable",
    MediaPermissionDenied = "MediaPermissionDenied",
    ParticipantJoining = "ParticipantJoining",
    SelfTestFailed = "SelfTestFailed",
    Suspend = "Suspend",
    VhoCall = "VhoCall",
}

export class AddSelfTestFailureEventRequest implements IAddSelfTestFailureEventRequest {
    participant_id?: string | undefined;
    event_type?: EventType | undefined;
    self_test_failure_reason?: SelfTestFailureReason | undefined;

    constructor(data?: IAddSelfTestFailureEventRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.participant_id = data["participant_id"];
            this.event_type = data["event_type"];
            this.self_test_failure_reason = data["self_test_failure_reason"];
        }
    }

    static fromJS(data: any): AddSelfTestFailureEventRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddSelfTestFailureEventRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["participant_id"] = this.participant_id;
        data["event_type"] = this.event_type;
        data["self_test_failure_reason"] = this.self_test_failure_reason;
        return data; 
    }
}

export interface IAddSelfTestFailureEventRequest {
    participant_id?: string | undefined;
    event_type?: EventType | undefined;
    self_test_failure_reason?: SelfTestFailureReason | undefined;
}

export enum SelfTestFailureReason {
    Camera = "Camera",
    Microphone = "Microphone",
    Video = "Video",
    BadScore = "BadScore",
    IncompleteTest = "IncompleteTest",
}

export class TestCallScoreResponse implements ITestCallScoreResponse {
    score?: TestScore | undefined;
    passed?: boolean | undefined;

    constructor(data?: ITestCallScoreResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.score = data["score"];
            this.passed = data["passed"];
        }
    }

    static fromJS(data: any): TestCallScoreResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TestCallScoreResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["score"] = this.score;
        data["passed"] = this.passed;
        return data; 
    }
}

export interface ITestCallScoreResponse {
    score?: TestScore | undefined;
    passed?: boolean | undefined;
}

export enum TestScore {
    Good = "Good",
    Okay = "Okay",
    Bad = "Bad",
}

export class UpdateParticipantStatusEventRequest implements IUpdateParticipantStatusEventRequest {
    participant_id?: string | undefined;
    event_type?: EventType | undefined;

    constructor(data?: IUpdateParticipantStatusEventRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.participant_id = data["participant_id"];
            this.event_type = data["event_type"];
        }
    }

    static fromJS(data: any): UpdateParticipantStatusEventRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateParticipantStatusEventRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["participant_id"] = this.participant_id;
        data["event_type"] = this.event_type;
        return data; 
    }
}

export interface IUpdateParticipantStatusEventRequest {
    participant_id?: string | undefined;
    event_type?: EventType | undefined;
}

export class UserProfileResponse implements IUserProfileResponse {
    role?: UserRole | undefined;
    first_name?: string | undefined;
    last_name?: string | undefined;
    display_name?: string | undefined;

    constructor(data?: IUserProfileResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.role = data["role"];
            this.first_name = data["first_name"];
            this.last_name = data["last_name"];
            this.display_name = data["display_name"];
        }
    }

    static fromJS(data: any): UserProfileResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserProfileResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role;
        data["first_name"] = this.first_name;
        data["last_name"] = this.last_name;
        data["display_name"] = this.display_name;
        return data; 
    }
}

export interface IUserProfileResponse {
    role?: UserRole | undefined;
    first_name?: string | undefined;
    last_name?: string | undefined;
    display_name?: string | undefined;
}

export class TaskResponse implements ITaskResponse {
    id?: number | undefined;
    origin_id?: string | undefined;
    body?: string | undefined;
    type?: TaskType | undefined;
    status?: TaskStatus | undefined;
    created?: Date | undefined;
    updated?: Date | undefined;
    updated_by?: string | undefined;

    constructor(data?: ITaskResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.origin_id = data["origin_id"];
            this.body = data["body"];
            this.type = data["type"];
            this.status = data["status"];
            this.created = data["created"] ? new Date(data["created"].toString()) : <any>undefined;
            this.updated = data["updated"] ? new Date(data["updated"].toString()) : <any>undefined;
            this.updated_by = data["updated_by"];
        }
    }

    static fromJS(data: any): TaskResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TaskResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["origin_id"] = this.origin_id;
        data["body"] = this.body;
        data["type"] = this.type;
        data["status"] = this.status;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toISOString() : <any>undefined;
        data["updated_by"] = this.updated_by;
        return data; 
    }
}

export interface ITaskResponse {
    id?: number | undefined;
    origin_id?: string | undefined;
    body?: string | undefined;
    type?: TaskType | undefined;
    status?: TaskStatus | undefined;
    created?: Date | undefined;
    updated?: Date | undefined;
    updated_by?: string | undefined;
}

export enum TaskType {
    Hearing = "Hearing",
    Judge = "Judge",
    Participant = "Participant",
}

export enum TaskStatus {
    ToDo = "ToDo",
    Done = "Done",
}

export class TokenResponse implements ITokenResponse {
    expires_on?: string | undefined;
    token?: string | undefined;

    constructor(data?: ITokenResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.expires_on = data["expires_on"];
            this.token = data["token"];
        }
    }

    static fromJS(data: any): TokenResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TokenResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expires_on"] = this.expires_on;
        data["token"] = this.token;
        return data; 
    }
}

export interface ITokenResponse {
    expires_on?: string | undefined;
    token?: string | undefined;
}

export class ConferenceEventRequest implements IConferenceEventRequest {
    event_id?: string | undefined;
    event_type?: EventType | undefined;
    time_stamp_utc?: Date | undefined;
    conference_id?: string | undefined;
    participant_id?: string | undefined;
    transfer_from?: RoomType | undefined;
    transfer_to?: RoomType | undefined;
    reason?: string | undefined;

    constructor(data?: IConferenceEventRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.event_id = data["event_id"];
            this.event_type = data["event_type"];
            this.time_stamp_utc = data["time_stamp_utc"] ? new Date(data["time_stamp_utc"].toString()) : <any>undefined;
            this.conference_id = data["conference_id"];
            this.participant_id = data["participant_id"];
            this.transfer_from = data["transfer_from"];
            this.transfer_to = data["transfer_to"];
            this.reason = data["reason"];
        }
    }

    static fromJS(data: any): ConferenceEventRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ConferenceEventRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["event_id"] = this.event_id;
        data["event_type"] = this.event_type;
        data["time_stamp_utc"] = this.time_stamp_utc ? this.time_stamp_utc.toISOString() : <any>undefined;
        data["conference_id"] = this.conference_id;
        data["participant_id"] = this.participant_id;
        data["transfer_from"] = this.transfer_from;
        data["transfer_to"] = this.transfer_to;
        data["reason"] = this.reason;
        return data; 
    }
}

export interface IConferenceEventRequest {
    event_id?: string | undefined;
    event_type?: EventType | undefined;
    time_stamp_utc?: Date | undefined;
    conference_id?: string | undefined;
    participant_id?: string | undefined;
    transfer_from?: RoomType | undefined;
    transfer_to?: RoomType | undefined;
    reason?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}