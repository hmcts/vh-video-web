name: Close PR
on:
  pull_request:
    types:
      - closed

permissions:
  id-token: write
  contents: read

env:
  ado_org: "hmcts"
  ado_project: "Video Hearings"
  ado_pipeline: "hmcts.vh-video-web.sds.pr-close"
  pr_number: ${{github.event.pull_request.number}}
  branch: ${{ github.head_ref }}
  AZURE_DEVOPS_EXT_PAT: ${{ secrets.AZURE_DEVOPS_TOKEN }}

jobs:
  deployment:
    runs-on: ubuntu-latest
    steps:
     - name: Check if merge branch exists
       shell: pwsh
       run: |
         $mergeBranch = "refs/heads/${{ env.branch }}/merge"
         $headBranch = "refs/pull/${{ env.pr_number }}/head"
         $branchExists = git ls-remote --heads origin $mergeBranch
         if (-not $branchExists) {
             Write-Host "Merge branch does not exist. Using head branch."
             $branch = $headBranch
         } else {
             Write-Host "Using merge branch."
             $branch = $mergeBranch
         }
         echo "::set-env name=TARGET_BRANCH::$branch"
     - name: Trigger Pipline
       shell: pwsh
       run: |
          $gitPullRequestId = "${{ env.pr_number }}"
          $branch="${{ env.TARGET_BRANCH }}"
          $pipelineName = "${{ env.ado_pipeline }}"
          $organisation = "https://dev.azure.com/${{ env.ado_org }}/"
          $project = "${{ env.ado_project }}"
          Write-Host "Login to $organisation $project"
          #az devops login --organization $organisation
          Write-Host "Get Definition of $pipelineName"
          $definitions = az pipelines build definition list --name $pipelineName  --org $organisation --project $project | ConvertFrom-Json 
          $definitionId = ""
          if ($definitions.length -gt 0){
              $definition = $definitions[0]
              Write-host $definition
              $definitionId = $definition.id
              Write-Host "Trigger PR $gitPullRequestId def $definitionId for branch $branch"
              az pipelines run --branch $branch --detect $false --folder-path "\" --id $definitionId --org $organisation --project $project --parameters "prNumber=$gitPullRequestId" #--debug
          } else {
              Write-Error "No Definition found with name $pipelineName in $organisation proj $project "
              exit 1
          }
